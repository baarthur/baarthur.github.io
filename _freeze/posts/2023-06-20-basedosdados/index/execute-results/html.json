{
  "hash": "d6822f00bb7da982982e7c80cc255b1a",
  "result": {
    "markdown": "---\ntitle: \"Acessando a Base dos Dados no R\"\ndescription: \"É mais fácil do que parece!\"\nauthor:\n  - name: Arthur Bazolli\n    url: https://baarthur.github.io/\n    affiliation: PPGE/UFJF\n    affiliation-url: https://www2.ufjf.br/poseconomia/ \ndate: 2023-06-20\ncategories: [R, Basedosdados, Tutorial] # self-defined categories\ncitation: \n  url: https://baarthur.github.io/posts/2023-06-20-basedosdados/ \nimage: img/bd_logo.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n\nexecute: \n  echo: fenced\n  eval: false\n\nformat: \n  html:\n     include-in-header: \n        text: |\n          <style>\n          h1 {\n          color: #fff;\n          }\n          </style>\n---\n\n\n## Introdução\n\nA [Base dos Dados](https://basedosdados.org/) é uma platadorma excelente para obter dados oficiais e tratados de forma conveniente. Podemos baixá-la direto no R com facilidade, basta prestarmos atenção a algumas etapas.\n\nEsta é uma rotina simplificada. Veja mais no Workshop: [Aprenda a acessar dados públicos em R](https://www.youtube.com/watch?v=M9ayiseIjvI&t=2781s&ab_channel=BasedosDados), da Base dos Dados.\n\n## Primeiros passos\n\nSempre que for trabalhar em um novo projeto, aproveite as funcionalidades do R Studio. Vá em `File` > `New Project...` > `New Directory` ou `Existing Directory`.\nSegundo passo: criar um arquivo para a rotina (`File` > `New File...` > `...`). Pode ser um R Script, um R Markdown ou um Quarto Markdown (recomendo este último).\n\n::: {.callout-tip}\nUse pastas diferentes dentro da sua pasta do projeto para organizar seus arquivos. Eu uso três pastas; `data`, `src` e `output`: a primeira para as bases de dados, a segunda para os códigos e a terceira para PDFs, gráficos e outras produções.\n:::\n\nCrie um bloco de código (`Ctrl` + `Alt` + `I`) para chamar os pacotes necessários. Use a opção `#| label: setup`, como abaixo, para ele sempre ser executado no começo.\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# geral e tratamento de dados\nlibrary(here)\nlibrary(tidyverse)\n\n# bases de dados\nlibrary(basedosdados)\n```\n````\n:::\n\n\n\n### Google Cloud\n\nPara baixar os dados no R, vamos precisar criar um projeto no Google Cloud. Os projetos do Google Cloud são muito usados em diversas situações (ex.: APIs do Google Maps) e a Google nos dá um limite gratuito (1 TB por dia ou 200 dólares por mês): mas não se preocupe, você não vai estourar essa cota.\n\n1. Vá até [cloud.google.com/](https://cloud.google.com/)\n2. Clique em `Console` (canto superior direito) \n3. Na caixa de diálogo (vide abaixo), concorde e continue\n\n![](img/bd_1.png){height=\"400\"}\n\n4. Em seguida, clique em `Selecione um projeto` > `NOVO PROJETO`\n5. Dê um nome ao projeto. Esse nome não pode ser alterado depois.\n\n![](img/bd_2.png){height=\"400\"}\n\n6. Após criar o seu projeto, você será direcionado à página do projeto. Agora, é só configurar as funções do pacote `{basedosdados}` no R para acessar o seu projeto.\n\n### Base dos dados\n\nVamos chamar a função `set_billing_id()`. Dentro dela, você vai inserir o ID do seu projeto (entre aspas, porque é um `character`), disponível aqui:\n\n![](img/bd_3.png){height=\"400\"}\n\n::: {.callout-warning}\nO seu ID do projeto é pessoal. Não compartilhe com ninguém, ou disponibilize na internet, ou você corre o risco de ganhar uma fatura nada amigável no seu cartão de crédito.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: config-bd\n\nset_billing_id(\"id-projeto\")\n```\n````\n:::\n\n\nVocê deve ver a mensagem \"Project keys set successfully\".\n\n\n## Chamada SQL\n\nA melhor forma de baixar dados da BD pelo R é fazendo uma chamada SQL (lê-se \"síquel\" ou *sequel*). [SQL](https://pt.wikipedia.org/wiki/SQL) é uma linguagem de pesquisa, muito usada para acessar base dos dados. Mas não se preocupe, não precisamos dominar SQL! Basta aprender a estrutura básica.\n\n### Query: sintaxe básica\n\nNa página da base que você pretende baixar (ex.: [PNAD Contínua](https://basedosdados.org/dataset/9fa532fb-5681-4903-b99d-01dc45fd527a?table=a04fc85d-908a-4393-b51d-1bd517a40210)), copie o código que está na aba SQL: ele é a sua *query*, que você vai usar para requisitar uma informação. Você vai criar um objeto no `R` para guardá-la.\n\nObserve que a `query` tem a seguinte estrutura\n> `SELECT` \\* `FROM` \\`basedosdados.br_ibge_pnadc.microdados\\` `LIMIT 100`\n\nVamos entendê-la:\n\n* `SELECT` indica as variáveis que vamos selecionar. Como essa informação é seguida de um asterisco, indica que vamos selecionar todas as variáveis da base. Para selecionar variáveis: \n  + Selecione uma das tabelas tratadas no menu lateral esquerdo.\n  + Desça até colunas: ali você encontra o nome das variáveis, seu formato e uma descrição.\n  + Separe os nomes das variáveis por vírgulas após `SELECT` (apague o asterisco)\n* `FROM` \\`basedosdados.br_ibge_pnadc.microdados\\`: o endereço de onde os dados virão.\n* `LIMIT 100` significa que estamos limitando a baixar apenas as 100 primeiras linhas.\n\nAo baixar microdados do Censo, da Rais ou da Pnad, estamos lidando com um volume gigante de informações. Por isso, é recomendável usar a opção `LIMIT 100`, `LIMIT 1000` etc para baixar só um pedaço e testar se você vai querer mesmo essa base (por exemplo, investigar se as variáveis te atendem).\n\nQuando você já tiver certeza de que vai usar essa base, tire o `LIMIT XXX`, mas atenção: é **extremamente** recomendável que você selecione uma lista de variáveis em vez de baixar todas. Isso vai poupar não apenas sua internet e o espaço no seu disco, mas também a eficiência do R quando for ler e trabalhar nos seus dados.\n\nExemplo: vamos pegar algumas informações da PNAD de domicílios.\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: query-1\n\nquery_pnad <- \"SELECT ano, id_domicilio, id_uf, id_upa, V1028, V2007, V2010, V3001, V4009, V4012, VD3005 VD4032 FROM basedosdados.br_ibge_pnadc.microdados LIMIT 100\"\n```\n````\n:::\n\n\nPodemos melhorar a query ainda mais aprendendo mais três argumentos: `WHERE`, `AND`, `OR` e `in`. Eles nos ajudam a filtrar a base para, por exemplo, baixar dados só de um estado, de anos específicos ou uma combinação disso tudo. Isso facilita **muito** a nossa vida, porque assim evitamos baixar um monte de dados desnecessários. \n\nExemplo: atualizar a query anterior para pegar apenas dados de 2017 a 2021 de Minas Gerais. Para isso, vamos usar um pouco de lógica para montar a sintaxe:\n\n* `WHERE` indica os filtros a serem aplicados. No caso, `sigla_uf='MG'` é o filtro do estado.\n* O filtro do ano é mais complicado. Temos duas alternativas:\n  + `ano = 2017 OR ano = 2019 OR ano = 2021`. Muito repetitivo!\n  + Melhor: `ano in (2017,2019,2021)`.\n* Agora, como queremos dados de MG **E** nessa janela temporal, concatenamos os dois com `AND`:\n  + `SELECT (...) WHERE sigla_uf='MG' AND (ano in (2017,2019,2021))`\n  + Colocamos a cláusula do ano dentro de parênteses para garantir que tudo aquilo será avaliado. Isso é importante, por exemplo, quando estivermos trabalhando com cláusulas `OR` em conjunto, senão vira bagunça.\n  \n::: {.callout-warning}\nA sua `query` é um vetor entre aspas no `R`. Assim, se você estiver filtrando uma variável que é character, você pode acabar estragando sua `query` se não tomar cuidado. Por isso, use aspas duplas (`\"`) para a `query` e aspas simples (`'`) para os `character`s dentro da `query`, como fizemos com `sigla_uf='MG'`.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: query-2\n\nquery_pnad <- \"SELECT ano, id_domicilio, id_uf, id_upa, V1028, V2007, V2010, V3001, V4009, V4012, VD3005 VD4032 FROM basedosdados.br_ibge_pnadc.microdados WHERE sigla_uf='MG' AND ano in (2017,2019,2021) LIMIT 100\"\n```\n````\n:::\n\n\nJá está bom, mas essa query está difícil de ler. Podemos separar cada bloco dela em objetos diferentes. depois concatenar tudo em um objeto só usando `paste()`:\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: query-3\n\nvariables <- \"ano, id_domicilio, id_uf, id_upa, V1028, V2007, V2010, V3001, V4009, V4012, VD3005 VD4032\"\nsource <- \"`basedosdados.br_ibge_pnadc.microdados`\"\nclause_where <- \"sigla_uf='MG'\"\nclause_and_ano <- \"(ano in (2017,2019,2021))\"\n\n### query: PNAD MG 2017-2021\nquery_pnad_1721 <- paste(\n  \"SELECT\", variables,\n  \"FROM\", source, \n  \"WHERE\", clause_where,\n  \"AND\", clause_and_ano,\n  \"LIMIT 100\"\n)\n```\n````\n:::\n\n\nEssa estrutura é útil porque permite facilmente modificar trechos evitando erros e reproduzir em outros trabalhos mantendo uma sintaxe padronizada e eficiente. Outra dica: você pode modificar a query comentando linhas do seu vetor, como no exemplo abaixo (tirar o LIMIT e baixar tudo). \n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: query-4\n\n### query: PNAD MG 2017-2021\nquery_pnad_1721 <- paste(\n  \"SELECT\", variables,\n  \"FROM\", source, \n  \"WHERE\", clause_where,\n  \"AND\", clause_and_ano,\n  \"LIMIT 100\"\n)\n```\n````\n:::\n\n\n\n### Baixar a query\n\nAgora, podemos baixar a query. Podemos fazer isso de duas formas: salvando em um objeto do R ou salvando em um .csv no computador. Eu prefiro a segunda opção, porque permite carregar os dados depois sem ter que baixar tudo de novo. Na hora de baixar os dados, vai aparecer uma opção no console do `R` pedindo para autenticar o usuário no seu navegador (ou digite `2`, se o seu email já aparecer) e prossiga.\n\n::: {.callout-warning}\nVocê deve selecionar todas as caixas, como na imagem abaixo.\n:::\n\n![](img/bd_4.png){height=\"400\"}\n\n**Opção 1: direto no R**\n\nNesse caso, usamos a função `read_sql()`\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: download-query-R\n\ndf_pnad <- read_sql(query_pnad_1721)\n```\n````\n:::\n\n\n**Opção 2: salvar no disco**\n\nPara isso, usamos a função `download()` e incluímos na chamada o argumento `path` com o caminho para salvar. Como estamos usando um `R Project`, passamos o diretório relativo à pasta do projeto. Ou seja: não precisa de inverter barras e pegar o caminho completo da pasta. No caso de usar RMarkdown ou Quarto (meu caso) em vez de um R Script, usamos a função `here()` também.\n\nNo exemplo abaixo, vamos salvar a base dos dados na pasta `data` dentro da pasta do projeto (não se esqueça de criar a pasta).\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: download-query\n\ndownload(query_pnad_1721, path = here(\"data/df_pnad_mg_1721.csv\"))\n```\n````\n:::\n\n\nPronto! Agora já podemos carregar, tratar e analisar os dados:\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: load-bd\n\ndf_pnad <- read_csv(here(\"data/df_pnad_mg_1721.csv\"))\n```\n````\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}